/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Consignment } from "./Consignment";
import { ConsignmentCountArgs } from "./ConsignmentCountArgs";
import { ConsignmentFindManyArgs } from "./ConsignmentFindManyArgs";
import { ConsignmentFindUniqueArgs } from "./ConsignmentFindUniqueArgs";
import { CreateConsignmentArgs } from "./CreateConsignmentArgs";
import { UpdateConsignmentArgs } from "./UpdateConsignmentArgs";
import { DeleteConsignmentArgs } from "./DeleteConsignmentArgs";
import { ConsignmentService } from "../consignment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Consignment)
export class ConsignmentResolverBase {
  constructor(
    protected readonly service: ConsignmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Consignment",
    action: "read",
    possession: "any",
  })
  async _consignmentsMeta(
    @graphql.Args() args: ConsignmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Consignment])
  @nestAccessControl.UseRoles({
    resource: "Consignment",
    action: "read",
    possession: "any",
  })
  async consignments(
    @graphql.Args() args: ConsignmentFindManyArgs
  ): Promise<Consignment[]> {
    return this.service.consignments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Consignment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Consignment",
    action: "read",
    possession: "own",
  })
  async consignment(
    @graphql.Args() args: ConsignmentFindUniqueArgs
  ): Promise<Consignment | null> {
    const result = await this.service.consignment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Consignment)
  @nestAccessControl.UseRoles({
    resource: "Consignment",
    action: "create",
    possession: "any",
  })
  async createConsignment(
    @graphql.Args() args: CreateConsignmentArgs
  ): Promise<Consignment> {
    return await this.service.createConsignment({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Consignment)
  @nestAccessControl.UseRoles({
    resource: "Consignment",
    action: "update",
    possession: "any",
  })
  async updateConsignment(
    @graphql.Args() args: UpdateConsignmentArgs
  ): Promise<Consignment | null> {
    try {
      return await this.service.updateConsignment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Consignment)
  @nestAccessControl.UseRoles({
    resource: "Consignment",
    action: "delete",
    possession: "any",
  })
  async deleteConsignment(
    @graphql.Args() args: DeleteConsignmentArgs
  ): Promise<Consignment | null> {
    try {
      return await this.service.deleteConsignment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
