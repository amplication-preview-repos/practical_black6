/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TrackingInformation } from "./TrackingInformation";
import { TrackingInformationCountArgs } from "./TrackingInformationCountArgs";
import { TrackingInformationFindManyArgs } from "./TrackingInformationFindManyArgs";
import { TrackingInformationFindUniqueArgs } from "./TrackingInformationFindUniqueArgs";
import { CreateTrackingInformationArgs } from "./CreateTrackingInformationArgs";
import { UpdateTrackingInformationArgs } from "./UpdateTrackingInformationArgs";
import { DeleteTrackingInformationArgs } from "./DeleteTrackingInformationArgs";
import { TrackingInformationService } from "../trackingInformation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TrackingInformation)
export class TrackingInformationResolverBase {
  constructor(
    protected readonly service: TrackingInformationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TrackingInformation",
    action: "read",
    possession: "any",
  })
  async _trackingInformationsMeta(
    @graphql.Args() args: TrackingInformationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TrackingInformation])
  @nestAccessControl.UseRoles({
    resource: "TrackingInformation",
    action: "read",
    possession: "any",
  })
  async trackingInformations(
    @graphql.Args() args: TrackingInformationFindManyArgs
  ): Promise<TrackingInformation[]> {
    return this.service.trackingInformations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TrackingInformation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TrackingInformation",
    action: "read",
    possession: "own",
  })
  async trackingInformation(
    @graphql.Args() args: TrackingInformationFindUniqueArgs
  ): Promise<TrackingInformation | null> {
    const result = await this.service.trackingInformation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TrackingInformation)
  @nestAccessControl.UseRoles({
    resource: "TrackingInformation",
    action: "create",
    possession: "any",
  })
  async createTrackingInformation(
    @graphql.Args() args: CreateTrackingInformationArgs
  ): Promise<TrackingInformation> {
    return await this.service.createTrackingInformation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TrackingInformation)
  @nestAccessControl.UseRoles({
    resource: "TrackingInformation",
    action: "update",
    possession: "any",
  })
  async updateTrackingInformation(
    @graphql.Args() args: UpdateTrackingInformationArgs
  ): Promise<TrackingInformation | null> {
    try {
      return await this.service.updateTrackingInformation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TrackingInformation)
  @nestAccessControl.UseRoles({
    resource: "TrackingInformation",
    action: "delete",
    possession: "any",
  })
  async deleteTrackingInformation(
    @graphql.Args() args: DeleteTrackingInformationArgs
  ): Promise<TrackingInformation | null> {
    try {
      return await this.service.deleteTrackingInformation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
